class Solution {
    public String longestPalindrome(String s) {
        if(s != null && s.length() > 0){
            if(s.length() <= 2)
                return s.charAt(0) == s.charAt(s.length()-1) ? s : s.substring(0,1);
            int len = s.length();
            boolean[][] dp = new boolean[len][len];
            int max = 1;
            int start = 0;
            for(int i = 0; i < len; i++){
                dp[i][i] = true;
                if(i+1 < len && s.charAt(i) == s.charAt(i+1)){
                    dp[i][i+1] = true;
                    max = 2;
                    start = i;                   
                } 
            }
            for(int k = 2; k < len; k++){
                for(int i = 0; i+k < len; i++){
                    int j = i+k;
                    if(s.charAt(i) == s.charAt(j) && dp[i+1][j-1]){
                        dp[i][j] = true;
                        if(max < k+1){
                            max = k+1;
                            start = i;
                        }
                    }
                }
            }
                                   
            return s.substring(start , start+max);
        }
        return s;
    }    
}
